---
import MainLayout from '../layouts/MainLayout.astro';
import ThemeSwitcher from '../components/ThemeSwitcher';
import { SiJavascript, SiReact, SiNodedotjs, SiAstro, SiTailwindcss, SiPython } from "react-icons/si";
import { Portfolio } from '../components/Portfolio';
import { Contact } from '../components/Contact';
import { Fire } from '../components/icons/Fire';
import { AboutMe } from '../components/icons/AboutMe';
import SectionAboutMe from '../components/AboutMe';
import ProjectsAreas from '../components/ProjectsAreas'
import '../styles/global.css'

// Forzar modo oscuro por defecto
const document = typeof window !== 'undefined' ? window.document : null;
document?.documentElement?.classList.add('dark');

// -----------------------
// Componente React: ProjectsAreas
// -----------------------


---
<MainLayout title="Yamid Dev | Desarrollador Full Stack">
  <div class="min-h-screen 
              bg-white text-gray-800
              dark:bg-gradient-to-b dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 
              dark:text-white 
              overflow-x-hidden 
              transition-colors duration-300">

    <!-- Hero Section -->
    <main class="container mx-auto px-4 py-16">
      <!-- Encabezado -->
      <div class="text-center mb-16 translate-y-4 animate-[fadeIn_1s_ease-out_forwards] rounded-lg p-8">
        <h1 class="text-5xl md:text-6xl font-bold mb-4 text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-emerald-500 p-4">
          Yamid Rodriguez
        </h1>
        <p class="text-[1.2rem] md:text-xl text-gray-600 dark:text-gray-300">
          Desarrollador Full Stack &amp; Creador de Contenido
        </p>
      </div>

      <!-- Botones de acción -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-16">
        {[
          { id: 'about-me', icon: AboutMe, text: 'Sobre mí' },
          { id: 'contact', icon: Contact, text: 'Contacto' },
          { id: 'content', icon: Fire, text: 'Contenido' },
          { id: 'projects', icon: Portfolio, text: 'Proyectos', primary: true },
        ].map((button) => (
          <button
            id={`btn-${button.id}`}
            class:list={[
              'group relative overflow-hidden rounded-xl transition-all duration-300 hover:scale-[1.02] active:scale-[0.98]',
              button.primary
                ? 'bg-gradient-to-r from-blue-500 to-emerald-500 text-white'
                : 'border border-gray-300 dark:border-gray-700 hover:border-gray-400 dark:hover:border-gray-600 text-gray-800 dark:text-gray-200'
            ]}
          >
            <div class="px-6 py-4 flex items-center justify-center gap-3 font-semibold">
              <button.icon />
              {button.text}
            </div>
          </button>
        ))}
      </div>

      <!-- Tecnologías -->
      <div class="flex flex-wrap gap-4 justify-center">
        {[
          { Icon: SiJavascript, name: "JavaScript", color: "text-yellow-500" },
          { Icon: SiReact, name: "React", color: "text-blue-500" },
          { Icon: SiNodedotjs, name: "Node.js", color: "text-green-600" },
          { Icon: SiPython, name: "Python", color: "text-blue-600" },
          { Icon: SiAstro, name: "Astro", color: "text-purple-500" },
          { Icon: SiTailwindcss, name: "Tailwind", color: "text-cyan-500" }
        ].map((tech) => (
          <div class="group relative">
            <div class="flex items-center gap-2 px-4 py-2 rounded-full 
                        bg-white dark:bg-gray-800 
                        border border-gray-200 dark:border-gray-700 
                        hover:border-gray-300 dark:hover:border-gray-600 
                        transition-all duration-300">
              <tech.Icon className={`w-5 h-5 ${tech.color}`} />
              <span class="text-sm text-gray-600 dark:text-gray-300 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                {tech.name}
              </span>
            </div>
          </div>
        ))}
      </div>
    </main>

    <!-- Secciones deslizantes -->
    {['projects', 'content', 'contact', 'about-me'].map((section) => (
      <div
        id={section}
        class="fixed top-0 left-full w-full h-full 
               bg-white dark:bg-gray-900/90 
               backdrop-blur-md 
               transition-transform duration-500 
               p-5 overflow-y-auto z-50 custom-scrollbar"
      >
        <button
          id={`cerrar-${section}`}
          class="absolute top-6 right-6 w-10 h-10 flex items-center justify-center rounded-full 
                 bg-gray-200 dark:bg-gray-800 
                 hover:bg-gray-300 dark:hover:bg-gray-700 
                 text-gray-600 dark:text-gray-300 
                 hover:text-gray-900 dark:hover:text-white 
                 transition-colors"
        >
          <span class="sr-only">Cerrar</span>
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        {section === 'projects' ? (
          // Sección "Proyectos" con Areas integradas
          <h1 class="text-[2rem] font-bold text-cyan-400 text-center">Projects</h1>
          <ProjectsAreas client:load />
        ) : section === 'contact' ? (
          <>
            <h1 class="text-[2rem] font-bold text-cyan-400 text-center">Contacto</h1>
          </>
        ) : section === 'content' ? (
          <h1 class="text-[2rem] font-bold text-cyan-400 text-center">Contenido</h1>
        ) : section === 'about-me' ?(
          <h1 class="text-[2rem] font-bold text-cyan-400 text-center">Acerca de mí</h1>
          <SectionAboutMe/>
        ) : null}
      </div>
    ))}
  </div>

  <!-- Script para abrir/cerrar secciones deslizantes -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const sections = ['projects', 'content', 'contact', 'about-me'];
      
      sections.forEach(section => {
        const button = document.getElementById(`btn-${section}`);
        const sectionEl = document.getElementById(section);
        const closeButton = document.getElementById(`cerrar-${section}`);
        
        if (button && sectionEl && closeButton) {
          button.addEventListener('click', () => {
            sectionEl.style.transform = 'translateX(-100%)';
          });
          
          closeButton.addEventListener('click', () => {
            sectionEl.style.transform = 'translateX(0)';
          });
        }
      });
    });
  </script>
</MainLayout>
